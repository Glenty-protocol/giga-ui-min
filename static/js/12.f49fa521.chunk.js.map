{"version":3,"sources":["config/index.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","hooks/useStake.ts","hooks/useUnstake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","hooks/useApprove.ts","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/Farms.tsx"],"names":["BigNumber","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","Wrapper","styled","div","ExpandableSectionButton","onClick","expanded","aria-label","role","className","color","style","fontFamily","fontWeight","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","theme","colors","primary","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","TranslateString","useI18n","liquidityUrlPathParts","justifyContent","marginBottom","external","href","bold","useStake","pid","dispatch","useDispatch","account","useWallet","masterChefContract","useMasterchef","onStake","useCallback","amount","a","stake","txHash","fetchFarmUserDataAsync","console","info","useUnstake","onUnstake","unstake","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledInputWrapper","radii","default","StyledInput","input","Input","endAdornment","onChange","placeholder","startAdornment","value","type","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","toLocaleString","background","times","toString","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","variant","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","alignItems","width","borderRadius","mr","BalanceAndCompound","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","toFixed","mb","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","id","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","onApprove","lpContract","approve","tx","useApprove","getContract","handleApprove","error","textTransform","fontSize","pr","marginTop","mt","fullWidth","backgroundColor","UnlockButton","RainbowLight","keyframes","ExpandingWrapper","card","borderColor","FarmCard","Tag","cakePrice","bnbPrice","showExpandableSection","setShowExpandableSection","farmImage","img","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","farmAPY","apy","toNumber","minimumFractionDigits","risk","window","innerWidth","display","gridTemplateColumns","padding","height","textAlign","src","alt","tokenSymbol","margin","CardActionsContainer","borderBottomLeftRadius","borderBottomRightRadius","paddingTop","borderTop","marginLeft","marginRight","Farms","farmsProps","useRouteMatch","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","multiplier","glentyFarms","category","gigapoolFarms","outsidersFarms","farmsList","userData","farmsToDisplay","cakeRewardPerYear","glentyPerBlock","poolWeight","pow","comparedTo","Page"],"mappings":"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","file":"static/js/12.f49fa521.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill:white;\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()} className='detailsButton'>\n      <Text color=\"white\" className=\"details\" style={{fontFamily:'Kanit',fontWeight:200}}>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Wrapper = styled.div`\n  margin-top: 8px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: white;\n  display: flex;\n  align-items: center;\n\n  svg {\n    display:none;\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n      <Flex justifyContent=\"flex-start\" marginBottom='5%'>\n        <Link external href={bscScanAddress} bold={false} color='#e3b82f' style={{fontFamily:'Kanit',fontWeight:200}}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n        <StyledLinkExternal\n          href={\n            isTokenOnly\n              ? `https://exchange.glentyswap.finance/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://exchange.glentyswap.finance/#/add/${liquidityUrlPathParts}`\n          } \n          style={{fontFamily:'Kanit',fontWeight:200,color:'#e3b82f',marginBottom:'5%'}}\n        >\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text color='white'>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text color='white'>{totalValueFormated}</Text>\n        </Flex>\n      )}\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: rgb(49, 39, 131);\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n  background:rgb(49, 39, 131) !important;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} type=\"number\" />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n  background:#1c1951;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: rgb(218,165,32);\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText style={{color:'rgb(218,165,32)'}}>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax} style={{background:'rgb(49, 39, 131)'}}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {depositFeeBP > 0 ? (\n        <StyledMaxText>\n          {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP / 10000).toString()}{' '}\n          {symbol}\n        </StyledMaxText>\n      ) : null}\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div`\nbackground:rgb(49, 39, 131) !important;\n`\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: rgb(218,165,32);\n  background:rgb(49, 39, 131) !important;\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: white;\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', depositFeeBP = 0 }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <div className='depositModal'>\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button onClick={onDismiss} style={{background:\"#788cff\",color:'white'}}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          style={{background:'rgb(218, 165, 32)'}}\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n    </div>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <div className='depositModal'>\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} style={{background:\"#788cff\",color:'white'}}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n        style={{background:'rgb(218, 165, 32)'}}\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n    </div>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP }) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button className='approvebtn' style={{background:'rgb(218, 165, 32)',width:'150px',borderRadius:'30px'}} onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\" className='buttonaddmin'>\n          <MinusIcon color=\"#788cff\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit} className='buttonaddmin'>\n          <AddIcon color=\"#788cff\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" className='removeearned'>\n      <Heading color='white'>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toFixed(5)\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'white' : 'white'}>{rawEarningsBalance === 0 ? '0.00000' : displayBalance}</Heading>\n      <BalanceAndCompound>\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n          className='harvestButton'\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { id, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.id)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(id)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if (isTokenOnly) {\n      return getContract(ethereum as provider, tokenAddress)\n    }\n    return getContract(ethereum as provider, lpAddress)\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={id}\n        depositFeeBP={depositFeeBP}\n      />\n    ) : (\n      <Flex justifyContent='space-between' className='blockPC'>\n      <h2 style={{color:'white',fontSize:'20px',marginTop:'10px'}} className='removeearned'>0</h2>\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} style={{backgroundColor:'rgb(218, 165, 32)'}} onClick={handleApprove} className='approvebtn'>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n      </Flex>\n    )\n  }\n\n  return (\n    <Action className='buttonsContainer'>\n      <Flex className='removeearned'>\n        <Text bold color='white' textTransform=\"uppercase\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          GLENTY\n        </Text>\n        <Text color='white' bold textTransform=\"uppercase\" fontSize=\"12px\" className='removeearned'>\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={id} />\n      <Flex className='removeearned stackedSpace'>\n        <Text bold textTransform=\"uppercase\" color=\"white\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"white\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ?<Flex justifyContent='space-between' className='blockPC'><h2 style={{color:'white',fontSize:'20px',marginTop:'10px'}} className='removeearned'>0</h2> <UnlockButton mt=\"8px\" className='approvebtn' fullWidth/></Flex> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton,Tag } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n  padding:0px 24px;\n`\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n  background: white;\n  color:black;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.img\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'GLENTY'\n  const farmAPY =\n    farm.apy &&\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n  return (\n    <div className='coincont'>\n      {window.innerWidth>900?(<div style={{display:'grid',gridTemplateColumns:'25% 25% 25% 25%',padding:\"5% 1% 0% 1%\",background:'rgb(49, 39, 131)',borderRadius:'18px'}} className=\"coin\">\n          <div className='logoCont'>\n          <img style={{height:'56px',width:'56px',background:'white',borderRadius:'50%',textAlign:'right'}} className='gigapoolimage' src={farmImage} alt={farm.lpSymbol} />\n          </div>\n          <div style={{color:'white',fontSize:'13pt',marginTop:'30%',textAlign:'left'}} className='nameCont'>\n          {farm.tokenSymbol}\n        </div>\n        <div style={{color:'white',fontSize:'10pt',marginTop:'30%'}} className='aprCont'>\n        <div style={{fontFamily:'Kanit',fontWeight:200,margin:'auto',textAlign:'start',width:'80%'}}>APR</div>\n        <div style={{margin:'auto',textAlign:'start',width:'80%',marginTop:'7%'}}>\n        {farmAPY}%\n        </div>\n        </div>\n        <div className='earned' style={{color:'white',fontSize:'10pt',marginTop:'30%'}}>\n        <div style={{fontFamily:'Kanit',fontWeight:200,margin:'auto',textAlign:'start',width:'80%'}}>Earned</div>\n        <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n        </div>\n\n        <div style={{margin:'10px -100px 0% -4%',width:\"408%\",background:'#030e33',padding:'0px 12px',borderBottomLeftRadius:'25px',borderBottomRightRadius:'25px'}}>\n        <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <div style={{margin:'15px',paddingTop:'10px',borderTop:'1px solid rgb(49, 39, 131)',width:'calc(100% + 24px)',marginLeft:'-12px',textAlign:'left'}} className='detailsCont'>\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      </div>\n      <div className='detailssection'>\n      <ExpandingWrapper expanded={showExpandableSection} style={{padding:'0px'}}>\n      <Flex>\n         <Text style={{ fontSize: '12pt',color:'white'}}>{TranslateString(10001, 'Deposit Fee')}</Text>\n         <Text bold style={{ fontSize: '12pt',color:'#788cff',marginLeft:'5px' }}>\n           {farm.depositFeeBP / 100}%\n         </Text>\n      </Flex> \n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly\n              ? `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n      </div>\n        </div>\n      </div>):(\n        <div style={{display:'grid',gridTemplateColumns:'20% 20% 20% 20% 20%',padding:\"5% 1% 0% 1%\",background:'#312783'}} className=\"coin\">\n          <div>\n          <img style={{height:'48px',width:'48px',background:'white',borderRadius:'50%'}} className='gigapoolimage' src={farmImage} alt={farm.lpSymbol} />\n          </div>\n          <div style={{color:'white',fontSize:'9pt',marginTop:'30%',textAlign:'left'}}>\n          {farm.tokenSymbol}\n        </div>\n        <div style={{color:'white',fontSize:'8pt',marginTop:'30%'}}>\n        <div style={{fontFamily:'Kanit',fontWeight:200,margin:'auto',textAlign:'start',width:'80%'}}>APR</div>\n        <div style={{margin:'auto',textAlign:'start',width:'80%',marginTop:'7%'}}>\n        {farmAPY}%\n        </div>\n        </div>\n        <div className='earned' style={{color:'white',fontSize:'8pt',marginTop:'30%'}}>\n        <div style={{fontFamily:'Kanit',fontWeight:200,margin:'auto',textAlign:'start',width:'80%'}}>Earned</div>\n        <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n        </div>\n        <div style={{marginTop:'25%'}} className='mobileDetails'>\n        <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      </div>\n      <div className='detailssection' style={{marginTop:'10px',width:\"510%\",background:'#030e33',marginBottom:'0%',marginRight:'-1%',marginLeft:\"-5%\"}}>\n      <ExpandingWrapper expanded={showExpandableSection} style={{padding:'0px 18px'}}>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Flex marginTop='20px'>\n         <Text style={{ fontSize: '12pt',color:'white'}}>{TranslateString(10001, 'Deposit Fee')}</Text>\n         <Text bold style={{ fontSize: '12pt',color:'#788cff',marginLeft:'5px' }}>\n           {farm.depositFeeBP / 100}%\n         </Text>\n      </Flex> \n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly\n              ? `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              : `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n      </div>\n      </div>\n      )}\n\n    </div>\n  )\n}\n\nexport default FarmCard\n","/* eslint-disable */\r\nimport React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nexport interface FarmsProps {\r\n  tokenMode?: boolean\r\n}\r\n\r\nfunction toFixed(x) {\r\n  if (Math.abs(x) < 1.0) {\r\n    let e = parseInt(x.toString().split('e-')[1]);\r\n    if (e) {\r\n        x *= Math.pow(10,e-1);\r\n        x = '0.' + (new Array(e)).join('0') + x.toString().substring(2);\r\n    }\r\n  } else {\r\n    let e = parseInt(x.toString().split('+')[1]);\r\n    if (e > 20) {\r\n        e -= 20;\r\n        x /= Math.pow(10,e);\r\n        x += (new Array(e+1)).join('0');\r\n    }\r\n  }\r\n  return x;\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { tokenMode } = farmsProps\r\n\r\n  // console.log('Cake Price ###: ', cakePrice.toFixed(5));\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(false)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\r\n  const glentyFarms = farmsLP.filter((farm) => farm.category === 'glenty')\r\n  const gigapoolFarms = farmsLP.filter((farm) => farm.category === 'gigapool')\r\n  const outsidersFarms = farmsLP.filter((farm) => farm.category === 'outsiders')\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n        //   return farm\r\n        // }\r\n        const cakeRewardPerBlock = new BigNumber(farm.glentyPerBlock || 1)\r\n          .times(new BigNumber(farm.poolWeight))\r\n          .div(new BigNumber(10).pow(18))\r\n\r\n         // console.log('cakeRewardPerBlock', cakeRewardPerBlock.toFixed(20));\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        let apy = cakePrice.times(cakeRewardPerYear)\r\n        //console.log('APY ###', apy);\r\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          totalValue = totalValue.times(bnbPrice)\r\n        }\r\n\r\n        if (totalValue.comparedTo(0) > 0) {\r\n          apy = apy.div(totalValue)\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.id}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [bnbPrice, account, cakePrice, ethereum],\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n     {/* <Heading as=\"h1\" size=\"30pt\" color=\"rgb(218, 165, 32)\" mb=\"50px\" style={{ textAlign: 'center',fontSize:'30pt',marginLeft:'-30%'}} className='headingremoved'>\r\n        {tokenMode\r\n          ? TranslateString(10002, 'Stake tokens to earn GLENTY')\r\n          : TranslateString(320, 'Stake LP tokens to earn GLENTY')}\r\n      </Heading>\r\n      <Heading as=\"h2\" color=\"rgb(218, 165, 32)\" mb=\"50px\" style={{ textAlign: 'center',fontSize:'20px',marginLeft:'-30%',fontWeight:'lighter'}} className='headingremoved'>\r\n        {TranslateString(10000, 'Deposit Fee will be used to buyback GLENTY')}\r\n      </Heading>\r\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} /> */}\r\n     <div className='glentyTop'>\r\n     <div className='headerTitle'> GLENTY</div>\r\n        <div className=\"grid-Glenty\">\r\n         {/* <Route exact path={`${path}`}>\r\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsList(inactiveFarms, true)}\r\n        </Route> */}\r\n        {farmsList(glentyFarms, true)}\r\n        </div>\r\n      </div>\r\n\r\n      <div className='gigapoolTop'>\r\n     <div className='headerTitle gigaTitle'> GIGAPOOL</div>\r\n     <input type='text' placeholder='Search GigaPool.....' className='searchInputG' />\r\n        <div className=\"grid-Gigapool\">\r\n          {/* <Route exact path={`${path}`}>\r\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsList(inactiveFarms, true)}\r\n      </Route> */}\r\n        {farmsList(gigapoolFarms, true)}\r\n        </div>\r\n      </div>\r\n      <div className='outTop' style={{marginTop:'17vh',marginBottom:'6vh'}}>\r\n     <div className='headerTitle gigaTitle'> OUTSIDERS</div>\r\n     <input type='text' placeholder='Search Outsiders.....' className='searchInputO' />\r\n        <div className=\"grid-Out\">       \r\n          {/* <Route exact path={`${path}`}>\r\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsList(inactiveFarms, true)}\r\n      </Route> */}\r\n        {farmsList(outsidersFarms, true)}\r\n        </div>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}